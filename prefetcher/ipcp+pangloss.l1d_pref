/***************************************************************************
For the Third Data Prefetching Championship - DPC3

Paper ID: #4
Instruction Pointer Classifying Prefetcher - IPCP

Authors: 
Samuel Pakalapati - samuelpakalapati@gmail.com
Biswabandan Panda - biswap@cse.iitk.ac.in
***************************************************************************/

#include "cache.h"

#define NUM_IP_TABLE_L1_ENTRIES 1024                        // IP table entries 
#define NUM_GHB_ENTRIES 16                                  // Entries in the GHB
#define NUM_IP_INDEX_BITS 10                                // Bits to index into the IP table 
#define NUM_IP_TAG_BITS 6                                   // Tag bits per IP table entry
#define S_TYPE 1                                            // stream
#define CS_TYPE 2                                           // constant stride
#define CPLX_TYPE 3                                         // complex stride
#define NL_TYPE 4                                           // next line
#define PREFETCH_DEGREE 3                                   // intial prefetch degree
#define THRESHOLD 7                                         // maximum prefetch degree
#define AC_HIGH 0.75                                        // higher threshold
#define AC_LOW 0.40                                         // lower threshold

// #define SIG_DEBUG_PRINT
#ifdef SIG_DEBUG_PRINT
#define SIG_DP(x) x
#else
#define SIG_DP(x)
#endif

class IP_TABLE_L1 {
  public:
    uint64_t ip_tag;
    uint64_t last_page;                                     // last page seen by IP
    uint64_t last_cl_offset;                                // last cl offset in the 4KB page
    int64_t last_stride;                                    // last delta observed
    uint16_t ip_valid;                                      // Valid IP or not   
    int conf;                                               // CS conf
    uint16_t signature;                                     // CPLX signature
    uint16_t str_dir;                                       // stream direction
    uint16_t str_valid;                                     // stream valid
    uint16_t str_strength;                                  // stream strength
    int degree;                                             // prefetch degree
    int useful;                                             // useful prefetches for this ip
    int useless;                                            // useless prefetches for this ip

    IP_TABLE_L1 () {
        ip_tag = 0;
        last_page = 0;
        last_cl_offset = 0;
        last_stride = 0;
        ip_valid = 0;
        signature = 0;
        conf = 0;
        str_dir = 0;
        str_valid = 0;
        str_strength = 0;
        degree = PREFETCH_DEGREE;
        useful = 0;
        useless = 0;
    };
};

class DELTA_PRED_TABLE {
public:
    int delta;
    int conf;

    DELTA_PRED_TABLE () {
        delta = 0;
        conf = 0;
    };        
};


IP_TABLE_L1 trackers_l1[NUM_CPUS][NUM_IP_TABLE_L1_ENTRIES];
DELTA_PRED_TABLE DPT_l1[NUM_CPUS][4096];
uint64_t ghb_l1[NUM_CPUS][NUM_GHB_ENTRIES];
uint64_t prev_cpu_cycle[NUM_CPUS];
uint64_t num_misses[NUM_CPUS];
float mpkc[NUM_CPUS] = {0};
int spec_nl[NUM_CPUS] = {0};


/***************Updating the signature*************************************/ 
uint16_t update_sig_l1(uint16_t old_sig, int delta){                           
    uint16_t new_sig = 0;
    int sig_delta = 0;

// 7-bit sign magnitude form, since we need to track deltas from +63 to -63
    sig_delta = (delta < 0) ? (((-1) * delta) + (1 << 6)) : delta;
    new_sig = ((old_sig << 1) ^ sig_delta) & 0xFFF;                     // 12-bit signature

    return new_sig;
}



/****************Encoding the metadata***********************************/
uint32_t encode_metadata(int stride, uint16_t type, int spec_nl){

uint32_t metadata = 0;

// first encode stride in the last 8 bits of the metadata
if(stride > 0)
    metadata = stride;
else
    metadata = ((-1*stride) | 0b1000000);

// encode the type of IP in the next 4 bits
metadata = metadata | (type << 8);

// encode the speculative NL bit in the next 1 bit
metadata = metadata | (spec_nl << 12);

return metadata;

}


/*********************Checking for a global stream (GS class)***************/

void check_for_stream_l1(int index, uint64_t cl_addr, uint8_t cpu){
int pos_count=0, neg_count=0, count=0;
uint64_t check_addr = cl_addr;

// check for +ve stream
    for(int i=0; i<NUM_GHB_ENTRIES; i++){
        check_addr--;
        for(int j=0; j<NUM_GHB_ENTRIES; j++)
            if(check_addr == ghb_l1[cpu][j]){
                pos_count++;
                break;
            }
    }

check_addr = cl_addr;
// check for -ve stream
    for(int i=0; i<NUM_GHB_ENTRIES; i++){
        check_addr++;
        for(int j=0; j<NUM_GHB_ENTRIES; j++)
            if(check_addr == ghb_l1[cpu][j]){
                neg_count++;
                break;
            }
    }

    if(pos_count > neg_count){                                // stream direction is +ve
        trackers_l1[cpu][index].str_dir = 1;
        count = pos_count;
    }
    else{                                                     // stream direction is -ve
        trackers_l1[cpu][index].str_dir = 0;
        count = neg_count;
    }

if(count > NUM_GHB_ENTRIES/2){                                // stream is detected
    trackers_l1[cpu][index].str_valid = 1;
    if(count >= (NUM_GHB_ENTRIES*3)/4)                        // stream is classified as strong if more than 3/4th entries belong to stream
        trackers_l1[cpu][index].str_strength = 1;
}
else{
    if(trackers_l1[cpu][index].str_strength == 0)             // if identified as weak stream, we need to reset
        trackers_l1[cpu][index].str_valid = 0;
}

}

/**************************Updating confidence for the CS class****************/
int update_conf(int stride, int pred_stride, int conf){
    if(stride == pred_stride){             // use 2-bit saturating counter for confidence
        conf++;
        if(conf > 3)
            conf = 3;
    } else {
        conf--;
        if(conf < 0)
            conf = 0;
    }

return conf;
}

#define MIN(a,b) (((a)<(b))?(a):(b))

#define word_offset 3 // (observing byte addresses with a 64-bit alignment)

// Delta Cache 
#define DC_range_l1d (128*8)	// 1024 (-1) possible deltas
#define DC_ways_l1d 16			// Delta cache assoc.
#define DC_LFUmax_l1d 128		// Maximum LFU counter value

int DC_deltanext_l1d[DC_range_l1d][DC_ways_l1d]; // Next deltas
int DC_LFUbits_l1d[DC_range_l1d][DC_ways_l1d];	 // Frequency counters


// Page Cache
#define PC_sets_l1d 256		// 256 sets
#define PC_ways_l1d 12		// 12 ways
#define PC_tag_bits_l1d 10 	// 10-bit page tags

int PC_ldelta_l1d[PC_sets_l1d][PC_ways_l1d]; 	// Last deltas
int PC_loffset_l1d[PC_sets_l1d][PC_ways_l1d];	// Last offsets
int PC_ptag_l1d[PC_sets_l1d][PC_ways_l1d];		// Page tag
int PC_NRUbit_l1d[PC_sets_l1d][PC_ways_l1d];	// Not-Recently Used (NRU) bits


// Supplementary function to caclulate the page tag
int get_page_tag_l1d(uint64_t page){
	return (page/PC_sets_l1d)&((1<<PC_tag_bits_l1d)-1);
}

/*************************throttle prefetch based on accuracy******************/

void l1d_prefetch_throttle(int index,int cpu){
    if(trackers_l1[cpu][index].useful+trackers_l1[cpu][index].useless >4){
        float accuracy = (1.0*trackers_l1[cpu][index].useful)/(trackers_l1[cpu][index].useful+trackers_l1[cpu][index].useless);
        if(accuracy >= AC_HIGH){ // INCREASE PREFETCH_DEGREE TO INCREASE TIMELINESS
            trackers_l1[cpu][index].degree++;
        }
        if(accuracy < AC_HIGH && accuracy >=AC_LOW){ // IDEAL CASE
            trackers_l1[cpu][index].degree;  
        }
        if(accuracy < AC_LOW){ // DECREASE PREFETCH_DEGREE TO SAVE BANDWIDTH
            trackers_l1[cpu][index].degree--; 
        }
        if(trackers_l1[cpu][index].degree<=0) {
            trackers_l1[cpu][index].degree = 1;
        }
        if(trackers_l1[cpu][index].degree>THRESHOLD){
            trackers_l1[cpu][index].degree = THRESHOLD;
        }
    }
}

void CACHE::l1d_prefetch_update(uint64_t ip,int type){
    int index = ip & ((1 << NUM_IP_INDEX_BITS)-1);
    uint16_t ip_tag = (ip >> NUM_IP_INDEX_BITS) & ((1 << NUM_IP_TAG_BITS)-1);
    if(trackers_l1[cpu][index].ip_tag == ip_tag){  // existing IP
            if(type==0){ // UPDATE USEFUL 
                trackers_l1[cpu][index].useful++;
            }
            if(type==1){ // UPDATE USELESS 
                trackers_l1[cpu][index].useless++;
            }
            l1d_prefetch_throttle(index,cpu); // CALL PREFETCH_THROTTLE TO CHANGE THE PREFETCH_DEGREE
    }
}

void CACHE::l1d_prefetcher_initialize() 
{
	// Initialise the Delta Cache 
	for (int i=0; i<DC_range_l1d; i++){ 
		for (int j=0; j<DC_ways_l1d; j++){ 
			DC_deltanext_l1d[i][j]= 1 + DC_range_l1d/2; // (Optional (currently not used): fallback to delta=1)
			DC_LFUbits_l1d[i][j] = 0;
		}
	}		
}


// This function updates the Delta Cache with a new delta transition (delta_from -> delta_next)
void update_DC_l1d (int delta_from, int delta_to){

	// Look for hits
	int dhit = 0;
	for (int i=0; i<DC_ways_l1d; i++){
		
		// If there is a hit, increment the respective counter
		if (DC_deltanext_l1d[delta_from][i]==delta_to){
			DC_LFUbits_l1d[delta_from][i]++;
			
			// If there is an overflow, 
			if (DC_LFUbits_l1d[delta_from][i]==DC_LFUmax_l1d){
				for (int j=0; j<DC_ways_l1d; j++){
					
					// Decrement all counters in the set (frequency proportions shall remain about the same)
					DC_LFUbits_l1d[delta_from][j]/=2;
				}
			}		
			dhit=1;			
			break;
		}
	}
	
	// If the delta transition is not in Delta Cache,
	if (dhit==0){
	
		// Evict the least-frequent delta transition in the set
		int min_freq=DC_LFUbits_l1d[delta_from][0];
		int min_freq_way=0;		
		for (int i=1; i<DC_ways_l1d; i++){
			if (DC_LFUbits_l1d[delta_from][i] < min_freq){
				min_freq = DC_LFUbits_l1d[delta_from][i];
				min_freq_way = i;
			}
		}
		
		// And replace with the current one		
		DC_deltanext_l1d[delta_from][min_freq_way] = delta_to;
		DC_LFUbits_l1d [delta_from][min_freq_way] = 1; 
	}
}


// This function returns the most probably immidiately next delta based on the current delta
int get_next_best_transition_l1d (int delta){

	// Caclulate the sum of the LFU counters for the current set
	int probs_sum = 0;
	for (int i=0; i<DC_ways_l1d; i++){
		probs_sum += DC_LFUbits_l1d[delta][i];
	}
	
	// Find the maximum LFU value
	int max_freq=DC_LFUbits_l1d[delta][0];
	int max_freq_way=0;	
	for (int i=1; i<DC_ways_l1d; i++){
		if (DC_LFUbits_l1d[delta][i] > max_freq){
			max_freq = DC_LFUbits_l1d[delta][i];
			max_freq_way = i;
		}
	}
	
	// Discard, if it represents a probability lower than 1/3
	if ((float)DC_LFUbits_l1d[delta][max_freq_way]/probs_sum<1/3.0) 
		return -1;
		
	return DC_deltanext_l1d[delta][max_freq_way];	
}


void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type)
{

    uint64_t curr_page = addr >> LOG2_PAGE_SIZE;
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    uint64_t cl_offset = (addr >> LOG2_BLOCK_SIZE) & 0x3F;
    uint16_t signature = 0, last_signature = 0;
    int prefetch_degree = 0;
    int spec_nl_threshold = 0;
    int num_prefs = 0;
    uint32_t metadata=0;
    uint16_t ip_tag = (ip >> NUM_IP_INDEX_BITS) & ((1 << NUM_IP_TAG_BITS)-1);

// update miss counter
if(cache_hit == 0)
    num_misses[cpu] += 1;

// update spec nl bit when num misses crosses certain threshold
if(num_misses[cpu] == 256){
    mpkc[cpu] = ((float) num_misses[cpu]/(current_core_cycle[cpu]-prev_cpu_cycle[cpu]))*1000;
    prev_cpu_cycle[cpu] = current_core_cycle[cpu];
    if(mpkc[cpu] > spec_nl_threshold)
        spec_nl[cpu] = 0;
    else
        spec_nl[cpu] = 1;
    num_misses[cpu] = 0;
}

// calculate the index bit
    int index = ip & ((1 << NUM_IP_INDEX_BITS)-1);
    if(trackers_l1[cpu][index].ip_tag != ip_tag){               // new/conflict IP
        if(trackers_l1[cpu][index].ip_valid == 0){              // if valid bit is zero, update with latest IP info
        trackers_l1[cpu][index].ip_tag = ip_tag;
        trackers_l1[cpu][index].last_page = curr_page;
        trackers_l1[cpu][index].last_cl_offset = cl_offset;
        trackers_l1[cpu][index].last_stride = 0;
        trackers_l1[cpu][index].signature = 0;
        trackers_l1[cpu][index].conf = 0;
        trackers_l1[cpu][index].str_valid = 0;
        trackers_l1[cpu][index].str_strength = 0;
        trackers_l1[cpu][index].str_dir = 0;
        trackers_l1[cpu][index].ip_valid = 1;
    } else {                                                    // otherwise, reset valid bit and leave the previous IP as it is
        trackers_l1[cpu][index].ip_valid = 0;
    }

    // issue a next line prefetch upon encountering new IP
        uint64_t pf_address = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE; // BASE NL=1, changing it to 3
        metadata = encode_metadata(1, NL_TYPE, spec_nl[cpu]);
        prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
        return;
    }
    else {                                                     // if same IP encountered, set valid bit
        trackers_l1[cpu][index].ip_valid = 1;
    }
    

    // calculate the stride between the current address and the last address
    int64_t stride = 0;
    if (cl_offset > trackers_l1[cpu][index].last_cl_offset)
        stride = cl_offset - trackers_l1[cpu][index].last_cl_offset;
    else {
        stride = trackers_l1[cpu][index].last_cl_offset - cl_offset;
        stride *= -1;
    }

    // don't do anything if same address is seen twice in a row
    if (stride == 0)
        return;


// page boundary learning
if(curr_page != trackers_l1[cpu][index].last_page){
    if(stride < 0)
        stride += 64;
    else
        stride -= 64;
}

// update constant stride(CS) confidence
trackers_l1[cpu][index].conf = update_conf(stride, trackers_l1[cpu][index].last_stride, trackers_l1[cpu][index].conf);

// update CS only if confidence is zero
if(trackers_l1[cpu][index].conf == 0)                      
    trackers_l1[cpu][index].last_stride = stride;

last_signature = trackers_l1[cpu][index].signature;
// update complex stride(CPLX) confidence
DPT_l1[cpu][last_signature].conf = update_conf(stride, DPT_l1[cpu][last_signature].delta, DPT_l1[cpu][last_signature].conf);

// update CPLX only if confidence is zero
if(DPT_l1[cpu][last_signature].conf == 0)
    DPT_l1[cpu][last_signature].delta = stride;

// calculate and update new signature in IP table
signature = update_sig_l1(last_signature, stride);
trackers_l1[cpu][index].signature = signature;

// check GHB for stream IP
check_for_stream_l1(index, cl_addr, cpu);    

if(NUM_CPUS == 1){
    prefetch_degree = trackers_l1[cpu][index].degree;
    spec_nl_threshold = 15; 
} else {                                    // tightening the degree and MPKC constraints for multi-core
    prefetch_degree = 2;
    spec_nl_threshold = 5;
}

SIG_DP(
cout << ip << ", " << cache_hit << ", " << cl_addr << ", " << addr << ", " << stride << "; ";
cout << last_signature<< ", "  << DPT_l1[cpu][last_signature].delta<< ", "  << DPT_l1[cpu][last_signature].conf << "; ";
cout << trackers_l1[cpu][index].last_stride << ", " << stride << ", " << trackers_l1[cpu][index].conf << ", " << "; ";
);

    if(trackers_l1[cpu][index].str_valid == 1){                         // stream IP
        // for stream, prefetch with twice the usual degree
            prefetch_degree = prefetch_degree*2;
        for (int i=0; i<prefetch_degree; i++) {
            uint64_t pf_address = 0;

            if(trackers_l1[cpu][index].str_dir == 1){                   // +ve stream
                pf_address = (cl_addr + i + 1) << LOG2_BLOCK_SIZE;
                metadata = encode_metadata(1, S_TYPE, spec_nl[cpu]);    // stride is 1
            }
            else{                                                       // -ve stream
                pf_address = (cl_addr - i - 1) << LOG2_BLOCK_SIZE;
                metadata = encode_metadata(-1, S_TYPE, spec_nl[cpu]);   // stride is -1
            }

            // Check if prefetch address is in same 4 KB page
            if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE)){
                break;
            }

            prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
            num_prefs++;
            SIG_DP(cout << "1, ");
            }

    } else if(trackers_l1[cpu][index].conf > 1 && trackers_l1[cpu][index].last_stride != 0){            // CS IP  
        for (int i=0; i<prefetch_degree; i++) {
            uint64_t pf_address = (cl_addr + (trackers_l1[cpu][index].last_stride*(i+1))) << LOG2_BLOCK_SIZE;

            // Check if prefetch address is in same 4 KB page
            if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE)){
                break;
            }

            metadata = encode_metadata(trackers_l1[cpu][index].last_stride, CS_TYPE, spec_nl[cpu]);
            prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
            num_prefs++;
            SIG_DP(cout << trackers_l1[cpu][index].last_stride << ", ");
        }
    } else if(DPT_l1[cpu][signature].conf >= 0 && DPT_l1[cpu][signature].delta != 0) {  // if conf>=0, continue looking for delta
        int pref_offset = 0,i=0;                                                        // CPLX IP
        for (i=0; i<prefetch_degree; i++) {
            pref_offset += DPT_l1[cpu][signature].delta;
            uint64_t pf_address = ((cl_addr + pref_offset) << LOG2_BLOCK_SIZE);

            // Check if prefetch address is in same 4 KB page
            if (((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE)) || 
                    (DPT_l1[cpu][signature].conf == -1) ||
                    (DPT_l1[cpu][signature].delta == 0)){
                // if new entry in DPT or delta is zero, break
                break;
            }

            // we are not prefetching at L2 for CPLX type, so encode delta as 0
            metadata = encode_metadata(0, CPLX_TYPE, spec_nl[cpu]);
            if(DPT_l1[cpu][signature].conf > 0){                                 // prefetch only when conf>0 for CPLX
                prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
                num_prefs++;
                SIG_DP(cout << pref_offset << ", ");
            }
            signature = update_sig_l1(signature, DPT_l1[cpu][signature].delta);
        }
    } 
int count=0;
if(num_prefs==0){
	unsigned long long int ref_addr = addr>>word_offset;
	unsigned long long int block = addr>>LOG2_BLOCK_SIZE;
	unsigned long long int page = addr >>(6+LOG2_BLOCK_SIZE);
	int page_offset = ref_addr & ( (1<<(6+(LOG2_BLOCK_SIZE-word_offset))) -1); // (Last 9 bits, for a 64-bit alignment)
	
	// Page Cache lookup: Looking for previous entries of the same page in the Page Cache
	int way=-1;
	for (int i=0; i<PC_ways_l1d; i++){
		if (PC_ptag_l1d[page%PC_sets_l1d][i]==get_page_tag_l1d(page)){
			way=i;
			break;
		}
	}

	int cur_delta = 1 + DC_range_l1d/2;  // (fallback to delta=1, when there is no page match)
	int matched = 0;	
	
	// If there was a Page Cache hit, 
	if (way!=-1){
		int ldelta_l1d=PC_ldelta_l1d[page%PC_sets_l1d][way];
		int loff_l1d=PC_loffset_l1d[page%PC_sets_l1d][way];		
		
		// Calculate current delta,
		cur_delta = page_offset-loff_l1d + DC_range_l1d/2;
		matched=1;
	
		// And update the Delta cache with the new delta transition
		update_DC_l1d(ldelta_l1d, cur_delta);		
	} 

	int next_delta=cur_delta;	
	uint64_t addr_n=addr;
	
	// Note: Since we are requesting byte addresses, the degree here is not the actual prefetch degree (PQ length is 8), (The line limit is enforced by the simulator)
	int degree = 36; // (PQ.SIZE-PQ.occupancy)*2/3; uint64_t line_requests[PQ.SIZE*8]; // Uncomment for counting lines instead
	
	// Decrease the degree for the multi-core configuration
	if (NUM_CPUS>1) degree/=4;
	
	for (int i_=0; (i_<128) && (count<degree); i_++){				
			
		// Find the most probable next delta from the current delta (1 generation) 
		int best_delta = get_next_best_transition_l1d(next_delta);
		
		// Abort if probability less than 1/3
		if (best_delta==-1) break;
					
		{													
			// Aggregate all counter values in the set
			int sum=0;
			for (int j=0; j<DC_ways_l1d; j++){
				sum+=DC_LFUbits_l1d[next_delta][j];
			}
			
			// Looking for the top 2 child deltas (no more than 2 having a probability > 1/3)
			int used[DC_ways_l1d] = {0};			
			for (int i=0; i<2/*DC_ways_l1d*/; i++){ 
				int max_way = -1;
				int max_value =  -1;
				for (int j=0; j<DC_ways_l1d; j++){
					if((DC_LFUbits_l1d[next_delta][j]>max_value) && (!used[j])){
						max_way = j;
						max_value = DC_LFUbits_l1d[next_delta][j];													
					}
				}											
				if (max_way==-1) break; 
				
				// If the probability is greater than 1/3,
				if((float)DC_LFUbits_l1d[next_delta][max_way]/sum > 1/3.0){
					used[max_way]=1;
					
					uint64_t pf_addr = ((addr_n>>word_offset)+(DC_deltanext_l1d[next_delta][max_way]-DC_range_l1d/2)) << word_offset;
					uint64_t pf_block = pf_addr >> LOG2_BLOCK_SIZE;
					unsigned long long int pf_page = pf_addr>>12;

					// And it falls in the same page, but in a diferent cache line
					if ((page==pf_page) && (block!=pf_block)) {						
					
						//// Uncomment for counting cache lines instead
						//int already_prefetched=0;
						//for (int k=0; k<count; k++){
						//	if (line_requests[k]==pf_block){
						//		already_prefetched=1; break;
						//	}
						//}	
						//if (!already_prefetched){	
						//	line_requests[count]=pf_block;
						
							// Prefetch block
							prefetch_line(ip, addr, pf_addr /*pf_block<<LOG2_BLOCK_SIZE*/, FILL_L1, 0);
							count++;
							
							// Stop if the prefetch degree is reached
							if (count==degree) break;
						//}
					}						
				} 			
			}
		}
		
		// Update values for moving to the next delta generation based on the top next delta	
		next_delta = best_delta;
		uint64_t pf_addr = ((addr_n>>word_offset)+(best_delta-DC_range_l1d/2)) << word_offset;
		addr_n = pf_addr;		
	}

	// If there was a Page cache miss, evict the Not-Recently used
	if (way==-1) {		
	
		// Look for NRU bit equal to 0 
		for (int i=0; i<PC_ways_l1d; i++){
			if (PC_NRUbit_l1d[page%PC_sets_l1d][i]==0){
				way=i;
				break;
			}				
		}
		
		// If all are equal to 1, flip them 
		if (way==-1){
			way=0;
			for (int i=0; i<PC_ways_l1d; i++)
				PC_NRUbit_l1d[page%PC_sets_l1d][i]=0;
		}
	}


	// Update the respective Page Cache entry
	if (matched)
		PC_ldelta_l1d[page%PC_sets_l1d][way]=cur_delta; 
	else	
		// If we have this entry for the first time, the delta value is invalid 
		// (0 represents delta=-512, which falls in a different page)		
		PC_ldelta_l1d[page%PC_sets_l1d][way]=0;
		
	PC_loffset_l1d[page%PC_sets_l1d][way]=page_offset;
	PC_ptag_l1d[page%PC_sets_l1d][way]=get_page_tag_l1d(page);
	PC_NRUbit_l1d[page%PC_sets_l1d][way]=1;
}
// if no prefetches are issued till now, speculatively issue a next_line prefetch
if(num_prefs == 0 && spec_nl[cpu] == 1 && count==0){                                        // NL IP
    uint64_t pf_address = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;  
    metadata = encode_metadata(1, NL_TYPE, spec_nl[cpu]);
    prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
    SIG_DP(cout << "1, ");
}

SIG_DP(cout << endl);

// update the IP table entries
trackers_l1[cpu][index].last_cl_offset = cl_offset;
trackers_l1[cpu][index].last_page = curr_page;

// update GHB
// search for matching cl addr
int ghb_index=0;
for(ghb_index = 0; ghb_index < NUM_GHB_ENTRIES; ghb_index++)
    if(cl_addr == ghb_l1[cpu][ghb_index])
        break;
// only update the GHB upon finding a new cl address
if(ghb_index == NUM_GHB_ENTRIES){
for(ghb_index=NUM_GHB_ENTRIES-1; ghb_index>0; ghb_index--)
    ghb_l1[cpu][ghb_index] = ghb_l1[cpu][ghb_index-1];
ghb_l1[cpu][0] = cl_addr;
}

return;
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{

}
void CACHE::l1d_prefetcher_final_stats()
{
cout << endl;
}

